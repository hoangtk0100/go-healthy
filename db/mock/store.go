// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hoangtk0100/go-healthy/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/hoangtk0100/go-healthy/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateMeal mocks base method.
func (m *MockStore) CreateMeal(arg0 context.Context, arg1 db.CreateMealParams) (db.Meal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeal", arg0, arg1)
	ret0, _ := ret[0].(db.Meal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeal indicates an expected call of CreateMeal.
func (mr *MockStoreMockRecorder) CreateMeal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeal", reflect.TypeOf((*MockStore)(nil).CreateMeal), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// GetMeal mocks base method.
func (m *MockStore) GetMeal(arg0 context.Context, arg1 uuid.UUID) (db.Meal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeal", arg0, arg1)
	ret0, _ := ret[0].(db.Meal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeal indicates an expected call of GetMeal.
func (mr *MockStoreMockRecorder) GetMeal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeal", reflect.TypeOf((*MockStore)(nil).GetMeal), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListMeals mocks base method.
func (m *MockStore) ListMeals(arg0 context.Context, arg1 db.ListMealsParams) ([]db.Meal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeals", arg0, arg1)
	ret0, _ := ret[0].([]db.Meal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeals indicates an expected call of ListMeals.
func (mr *MockStoreMockRecorder) ListMeals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeals", reflect.TypeOf((*MockStore)(nil).ListMeals), arg0, arg1)
}
