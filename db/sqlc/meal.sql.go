// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: meal.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMeal = `-- name: CreateMeal :one
INSERT INTO meals (
    username,
    name,
    description,
    calories,
    type
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, username, name, description, calories, type, created_at, updated_at, deleted_at
`

type CreateMealParams struct {
	Username    string         `json:"username"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Calories    sql.NullInt32  `json:"calories"`
	Type        MealType       `json:"type"`
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) (Meal, error) {
	row := q.db.QueryRowContext(ctx, createMeal,
		arg.Username,
		arg.Name,
		arg.Description,
		arg.Calories,
		arg.Type,
	)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Description,
		&i.Calories,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getMeal = `-- name: GetMeal :one
SELECT id, username, name, description, calories, type, created_at, updated_at, deleted_at FROM meals
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMeal(ctx context.Context, id uuid.UUID) (Meal, error) {
	row := q.db.QueryRowContext(ctx, getMeal, id)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Description,
		&i.Calories,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listMeals = `-- name: ListMeals :many
SELECT id, username, name, description, calories, type, created_at, updated_at, deleted_at FROM meals
WHERE 
    username = $1
    AND (
        (created_at >= $2::date OR $2 IS NULL) AND
        (created_at <= $3::date OR $3 IS NULL)
    )
ORDER BY created_at
LIMIT $5
OFFSET $4
`

type ListMealsParams struct {
	Username string       `json:"username"`
	FromDate sql.NullTime `json:"from_date"`
	ToDate   sql.NullTime `json:"to_date"`
	Offset   int32        `json:"offset"`
	Limit    int32        `json:"limit"`
}

func (q *Queries) ListMeals(ctx context.Context, arg ListMealsParams) ([]Meal, error) {
	rows, err := q.db.QueryContext(ctx, listMeals,
		arg.Username,
		arg.FromDate,
		arg.ToDate,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Meal{}
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Description,
			&i.Calories,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
