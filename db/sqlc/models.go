// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type DeviceType string

const (
	DeviceTypeIOS     DeviceType = "IOS"
	DeviceTypeANDROID DeviceType = "ANDROID"
	DeviceTypeWEBAPP  DeviceType = "WEB_APP"
)

func (e *DeviceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeviceType(s)
	case string:
		*e = DeviceType(s)
	default:
		return fmt.Errorf("unsupported scan type for DeviceType: %T", src)
	}
	return nil
}

type NullDeviceType struct {
	DeviceType DeviceType
	Valid      bool // Valid is true if DeviceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeviceType) Scan(value interface{}) error {
	if value == nil {
		ns.DeviceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeviceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeviceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.DeviceType, nil
}

type Gender string

const (
	GenderMALE   Gender = "MALE"
	GenderFEMALE Gender = "FEMALE"
	GenderOTHER  Gender = "OTHER"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Gender, nil
}

type MealType string

const (
	MealTypeMORNING MealType = "MORNING"
	MealTypeLUNCH   MealType = "LUNCH"
	MealTypeDINNER  MealType = "DINNER"
	MealTypeSNACK   MealType = "SNACK"
)

func (e *MealType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MealType(s)
	case string:
		*e = MealType(s)
	default:
		return fmt.Errorf("unsupported scan type for MealType: %T", src)
	}
	return nil
}

type NullMealType struct {
	MealType MealType
	Valid    bool // Valid is true if MealType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMealType) Scan(value interface{}) error {
	if value == nil {
		ns.MealType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MealType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMealType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.MealType, nil
}

type UserStatus string

const (
	UserStatusAVAILABLE UserStatus = "AVAILABLE"
	UserStatusLOCKED    UserStatus = "LOCKED"
	UserStatusREMOVED   UserStatus = "REMOVED"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.UserStatus, nil
}

type UserType string

const (
	UserTypeSYSTEM UserType = "SYSTEM"
	UserTypeADMIN  UserType = "ADMIN"
	UserTypeUSER   UserType = "USER"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.UserType, nil
}

type BlogPost struct {
	ID          uuid.UUID    `json:"id"`
	Username    string       `json:"username"`
	Title       string       `json:"title"`
	Description string       `json:"description"`
	CreatedAt   time.Time    `json:"created_at"`
	UpdatedAt   time.Time    `json:"updated_at"`
	DeletedAt   sql.NullTime `json:"deleted_at"`
}

type BodyRecord struct {
	ID        uuid.UUID     `json:"id"`
	Username  string        `json:"username"`
	Weight    sql.NullInt64 `json:"weight"`
	BodyFat   sql.NullInt64 `json:"body_fat"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
	DeletedAt sql.NullTime  `json:"deleted_at"`
}

type Diary struct {
	ID          uuid.UUID    `json:"id"`
	Username    string       `json:"username"`
	Title       string       `json:"title"`
	Description string       `json:"description"`
	CreatedAt   time.Time    `json:"created_at"`
	UpdatedAt   time.Time    `json:"updated_at"`
	DeletedAt   sql.NullTime `json:"deleted_at"`
}

type Exercise struct {
	ID             uuid.UUID      `json:"id"`
	Username       string         `json:"username"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	CaloriesBurned sql.NullInt32  `json:"calories_burned"`
	Duration       sql.NullInt32  `json:"duration"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type Meal struct {
	ID          uuid.UUID      `json:"id"`
	Username    string         `json:"username"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Calories    sql.NullInt32  `json:"calories"`
	Type        MealType       `json:"type"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	DeletedAt   sql.NullTime   `json:"deleted_at"`
}

type Session struct {
	ID           uuid.UUID      `json:"id"`
	Username     string         `json:"username"`
	RefreshToken string         `json:"refresh_token"`
	UserAgent    string         `json:"user_agent"`
	ClientIp     string         `json:"client_ip"`
	DeviceType   DeviceType     `json:"device_type"`
	DeviceID     sql.NullString `json:"device_id"`
	DeviceModel  sql.NullString `json:"device_model"`
	DeviceToken  sql.NullString `json:"device_token"`
	IsBlocked    bool           `json:"is_blocked"`
	ExpiresAt    time.Time      `json:"expires_at"`
	CreatedAt    time.Time      `json:"created_at"`
	DeletedAt    sql.NullTime   `json:"deleted_at"`
}

type User struct {
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	FullName          string         `json:"full_name"`
	PhoneNumber       sql.NullString `json:"phone_number"`
	Gender            NullGender     `json:"gender"`
	Type              UserType       `json:"type"`
	Status            UserStatus     `json:"status"`
	OldStatus         UserStatus     `json:"old_status"`
	AvatarUrl         sql.NullString `json:"avatar_url"`
	HashedPassword    string         `json:"hashed_password"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	CreatedAt         time.Time      `json:"created_at"`
	UpdatedAt         time.Time      `json:"updated_at"`
	DeletedAt         sql.NullTime   `json:"deleted_at"`
}
